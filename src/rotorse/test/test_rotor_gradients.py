#!/usr/bin/env python
# encoding: utf-8
"""
test_rotor_gradients.py

Created by Andrew Ning on 2013-01-28.
Copyright (c) NREL. All rights reserved.
"""

import unittest
import numpy as np
from commonse.utilities import check_gradient_unit_test
from rotorse.rotor import RGrid, TotalLoads, TipDeflection, RootMoment, MassProperties, ExtremeLoads, GustETM



class TestRGrid(unittest.TestCase):

    def test1(self):

        grid = RGrid()
        grid.r_aero = np.array([0.02222276, 0.06666667, 0.11111057, 0.2, 0.23333333, 0.3, 0.36666667, 0.43333333, 0.5, 0.56666667, 0.63333333, 0.64, 0.7, 0.83333333, 0.88888943, 0.93333333, 0.97777724])
        grid.fraction = np.array([0.0, 0.221750339522, 0.293817188822, 0.365884038121, 0.442455065507, 0.514521914807, 0.586588764105, 1.0, 0.050034345133, 0.0860690751106, 1.0, 0.513945366068, 1.0, 0.636330560083, 1.0, 0.429636571789, 1.0, 0.65029839566, 1.0, 0.504611469554, 1.0, 0.506064656711, 1.0, 1.0, 0.312283760506, 1.0, 0.532945578735, 1.0, 0.510375896771, 0.75360738708, 1.0, 0.486304715835, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
        grid.idxj = np.array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 14, 15, 16, 17])

        check_gradient_unit_test(self, grid)


class TestTotalLoads(unittest.TestCase):

    def test1(self):

        loads = TotalLoads()
        loads.aeroLoads.r = np.array([1.575, 2.940033033, 5.67000020475, 8.39996676225, 13.86, 15.9074997953, 20.0025, 24.0975002047, 28.1924997953, 32.2875, 36.3825002048, 40.4774997953, 40.887, 44.5725, 52.7624997953, 56.1750332378, 58.9049997952, 61.634966967, 63.0])
        loads.aeroLoads.Px = np.array([0.0, 394.495335464, 488.816521749, 403.91526216, 3498.00637403, 3269.97046313, 4043.59672475, 4501.44255062, 5033.93200097, 5718.97291507, 6320.75067512, 7109.17757276, 8059.89616754, 8525.76224891, 8922.31561839, 8701.63574206, 8270.06152072, 7295.11706029, 0.0])
        loads.aeroLoads.Py = np.array([-0, 70.1691953218, 168.88301855, 208.278564575, -1235.05334966, -1093.35619071, -1356.19151969, -1524.64653804, -1637.39245978, -1682.20028084, -1815.96503432, -1854.41936505, -2010.09761627, -1958.48701857, -1702.10190133, -1523.95755076, -1325.12331629, -935.412289309, -0])
        loads.aeroLoads.Pz = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
        loads.aeroLoads.Omega = 12.0
        loads.aeroLoads.pitch = 0.0
        loads.aeroLoads.azimuth = 180.0
        loads.r = np.array([1.575, 1.87769653853, 1.9760701684, 2.07444379828, 2.17896578003, 2.27733940991, 2.37571303979, 2.940033033, 3.07662515267, 3.17499878255, 5.67000020475, 7.0730538665, 8.39996676225, 11.8743527705, 13.86, 14.7396807928, 15.9074997953, 18.5704718586, 20.0025, 22.0688840711, 24.0975002047, 26.1698347667, 28.1924997953, 32.2875, 33.5663020632, 36.3825002048, 38.5649121314, 40.4774997953, 40.6864988295, 40.7861021746, 40.887, 42.6792760302, 44.5725, 52.7624997953, 56.1750332378, 58.9049997952, 61.634966967, 63.0])
        loads.theta = np.array([13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 12.9342402117, 12.4835185594, 11.4807962375, 10.9555376235, 10.2141732458, 9.50474414552, 8.79808349002, 8.12523177814, 6.8138304713, 6.42067815056, 5.58414310075, 4.96394649167, 4.44089107951, 4.38490319227, 4.35830230526, 4.3314093512, 3.86273855446, 3.38640148153, 1.57771432025, 0.953398905137, 0.504982546655, 0.0995167038088, -0.0878099])
        loads.tilt = 5.0
        loads.precone = 2.5
        loads.rhoA = np.array([1086.31387923, 1102.59977206, 1120.90516514, 1126.20434689, 1131.813843, 1137.07339365, 1086.16660785, 882.217532971, 894.901622709, 899.719853943, 731.023082747, 608.342843886, 542.222718332, 341.332102119, 336.952507859, 333.167490612, 330.70966121, 326.000136659, 323.264256247, 317.941928823, 310.869166296, 273.899186484, 262.928994775, 245.05275646, 236.749218603, 217.487633686, 205.107910133, 194.259756942, 167.463953528, 166.764129206, 165.810677408, 155.69651911, 146.647497247, 100.919341248, 82.5679535343, 67.796593467, 46.2981454714, 31.2090805766])


        check_gradient_unit_test(self, loads, tol=.003)


    def test2(self):

        loads = TotalLoads()
        loads.aeroLoads.r = np.array([1.575, 2.940033033, 5.67000020475, 8.39996676225, 13.86, 15.9074997953, 20.0025, 24.0975002047, 28.1924997953, 32.2875, 36.3825002048, 40.4774997953, 40.887, 44.5725, 52.7624997953, 56.1750332378, 58.9049997952, 61.634966967, 63.0])
        loads.aeroLoads.Px = np.array([0.0, 5284.01751742, 5957.44357892, 4576.24416488, 24983.1752719, 23185.4068553, 22772.6584971, 20742.2633915, 19438.9406889, 18477.9925607, 17798.8416165, 16587.2148132, 16307.1178682, 15198.3868957, 12397.4212608, 11065.3344497, 9918.01519381, 8690.90719256, 0.0])
        loads.aeroLoads.Py = np.array([-0, 3.23552756967e-13, 3.64788210501e-13, 2.80214138432e-13, -8241.69218443, -6959.18655392, -6216.4717769, -5238.79147412, -3965.60018365, -3301.4647433, -2434.41539477, -1921.45833684, -1784.90503315, -1413.83527174, -766.483242904, -565.612693573, -430.805328036, -317.225077607, -0])
        loads.aeroLoads.Pz = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
        loads.aeroLoads.Omega = 0.0
        loads.aeroLoads.pitch = 0.0
        loads.aeroLoads.azimuth = 0.0
        loads.r = np.array([1.575, 1.87769653853, 1.9760701684, 2.07444379828, 2.17896578003, 2.27733940991, 2.37571303979, 2.940033033, 3.07662515267, 3.17499878255, 5.67000020475, 7.0730538665, 8.39996676225, 11.8743527705, 13.86, 14.7396807928, 15.9074997953, 18.5704718586, 20.0025, 22.0688840711, 24.0975002047, 26.1698347667, 28.1924997953, 32.2875, 33.5663020632, 36.3825002048, 38.5649121314, 40.4774997953, 40.6864988295, 40.7861021746, 40.887, 42.6792760302, 44.5725, 52.7624997953, 56.1750332378, 58.9049997952, 61.634966967, 63.0])
        loads.theta = np.array([13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 13.2783, 12.9342402117, 12.4835185594, 11.4807962375, 10.9555376235, 10.2141732458, 9.50474414552, 8.79808349002, 8.12523177814, 6.8138304713, 6.42067815056, 5.58414310075, 4.96394649167, 4.44089107951, 4.38490319227, 4.35830230526, 4.3314093512, 3.86273855446, 3.38640148153, 1.57771432025, 0.953398905137, 0.504982546655, 0.0995167038088, -0.0878099])
        loads.tilt = 5.0
        loads.precone = 2.5
        loads.rhoA = np.array([1086.31387923, 1102.59977206, 1120.90516514, 1126.20434689, 1131.813843, 1137.07339365, 1086.16660785, 882.217532971, 894.901622709, 899.719853943, 731.023082747, 608.342843886, 542.222718332, 341.332102119, 336.952507859, 333.167490612, 330.70966121, 326.000136659, 323.264256247, 317.941928823, 310.869166296, 273.899186484, 262.928994775, 245.05275646, 236.749218603, 217.487633686, 205.107910133, 194.259756942, 167.463953528, 166.764129206, 165.810677408, 155.69651911, 146.647497247, 100.919341248, 82.5679535343, 67.796593467, 46.2981454714, 31.2090805766])

        check_gradient_unit_test(self, loads, tol=0.02)  # a couple with more significant errors, but I think these are correct and that the finite differencing is just poor.
        # TODO: However, I should check Akima in more detail




class TestRootMoment(unittest.TestCase):

    def test1(self):

        rm = RootMoment()

        # adding offset to try to avoid linear interpolation issue
        rm.r_str = 0.1 + np.array([1.575, 1.87769653853, 1.9760701684, 2.07444379828, 2.17896578003, 2.27733940991, 2.37571303979, 2.940033033, 3.07662515267, 3.17499878255, 5.67000020475, 7.0730538665, 8.39996676225, 11.8743527705, 13.86, 14.7396807928, 15.9074997953, 18.5704718586, 20.0025, 22.0688840711, 24.0975002047, 26.1698347667, 28.1924997953, 32.2875, 33.5663020632, 36.3825002048, 38.5649121314, 40.4774997953, 40.6864988295, 40.7861021746, 40.887, 42.6792760302, 44.5725, 52.7624997953, 56.1750332378, 58.9049997952, 61.634966967, 63.0])
        rm.aeroLoads.r = np.array([1.575, 2.940033033, 5.67000020475, 8.39996676225, 13.86, 15.9074997953, 20.0025, 24.0975002047, 28.1924997953, 32.2875, 36.3825002048, 40.4774997953, 40.887, 44.5725, 52.7624997953, 56.1750332378, 58.9049997952, 61.634966967, 63.0])
        rm.aeroLoads.Px = np.array([0.0, 394.495335464, 488.816521749, 403.91526216, 3498.00637403, 3269.97046313, 4043.59672475, 4501.44255062, 5033.93200097, 5718.97291507, 6320.75067512, 7109.17757276, 8059.89616754, 8525.76224891, 8922.31561839, 8701.63574206, 8270.06152072, 7295.11706029, 0.0])
        rm.aeroLoads.Py = np.array([-0, 70.1691953218, 168.88301855, 208.278564575, -1235.05334966, -1093.35619071, -1356.19151969, -1524.64653804, -1637.39245978, -1682.20028084, -1815.96503432, -1854.41936505, -2010.09761627, -1958.48701857, -1702.10190133, -1523.95755076, -1325.12331629, -935.412289309, -0])
        rm.aeroLoads.Pz = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])


        check_gradient_unit_test(self, rm, tol=5e-3)



class TestMassProperties(unittest.TestCase):

    def test1(self):

        mp = MassProperties()
        mp.blade_mass = 17288.717087
        mp.blade_moment_of_inertia = 11634376.0531
        mp.tilt = 5.0
        mp.nBlades = 3

        check_gradient_unit_test(self, mp)


class TestTipDeflection(unittest.TestCase):

    def test1(self):

        tip = TipDeflection()
        tip.dx = 4.27242809591
        tip.dy = -0.371550675139
        tip.dz = 0.0400553989266
        tip.theta = -0.0878099
        tip.pitch = 0.0
        tip.azimuth = 180.0
        tip.tilt = 5.0
        tip.precone = 2.5
        tip.dynamicFactor = 1.2

        check_gradient_unit_test(self, tip)


class TestExtremeLoads(unittest.TestCase):

    def test1(self):

        loads = ExtremeLoads()
        loads.T = [2414072.40260361, 188461.59444074]
        loads.Q = [10926313.24295958, -8041330.51312603]
        loads.nBlades = 3

        check_gradient_unit_test(self, loads)



class TestGustETM(unittest.TestCase):

    def test1(self):

        gust = GustETM()
        gust.V_mean = 10.0
        gust.V_hub = 11.7733866478
        gust.turbulence_class = 'B'
        gust.std = 3

        check_gradient_unit_test(self, gust)









if __name__ == '__main__':
    unittest.main()
